{% set version = "2.3.1" %}
{% set commit = "c9402b770efcc2721e6c49dec8428542e59f7a17" %}  # https://github.com/astra-toolbox/astra-toolbox/releases/tag/v2.3.1
{% set build = 0 %}

package:
  name: astra-toolbox
  version: {{ version }}

source:
  url: https://github.com/astra-toolbox/astra-toolbox/archive/{{ commit }}.tar.gz
  sha256: 3b4484df8289518de9f31d985e70cb58b65a2a82b99a0d4b9ec5eecf8b96789f
  patches:
  # patch created from askorikov/astra-toolbox@release_2.3.1_cmake
    - cmake.patch

# The libastra ABI is the same for all CUDA versions, but different for CUDA vs
# non-CUDA, so we build only with the latest CUDA version. We don't actually
# need the CUDA compiler, but we need conda-forge to assign a build environment
# with the __cuda attribute.

build:
  number: {{ build }}
  string: "cudapy{{ py }}h{{ PKG_HASH }}_{{ build + 100 }}"  # [cuda_compiler_version != "None"]
  script_env:
    - ASTRA_USE_CUDA=ON   # [cuda_compiler_version != "None"]
    - ASTRA_USE_CUDA=OFF  # [cuda_compiler_version == "None"]
  ignore_run_exports_from:
    - {{ compiler('cuda') }}

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - {{ stdlib('c') }}
    - cython >=0.13
  host:
    - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler_version != "None"]
    - cython >=0.13
    - libastra =={{ version }}
    - libastra =*=cuda*  # [cuda_compiler_version != "None"]
    - libastra =*=h*     # [cuda_compiler_version == "None"]
    - numpy
    - pip
    - python
    - setuptools
  run:
    - python
    - scipy

test:
  imports:
    - astra
  requires:
    # To avoid large downloads just for testing after build phase
    - nomkl  # [not win]
  commands:
    # 27 June 2022. conda-forge doesn't have reliable native ppc64le environment
    - python -c "import astra; astra.test()"  # [not (ppc64le and CI=='azure')]

about:
  home: http://www.astra-toolbox.com
  license: GPL-3.0-only
  license_file:
    - COPYING
    - lib/licenses/rapidxml.txt
    - lib/licenses/dlpack.txt
  summary: >
    The ASTRA Toolbox is a Python toolbox of high-performance GPU primitives for 2D and 3D tomography.

extra:
  recipe-maintainers:
    - askorikov
    - carterbox
