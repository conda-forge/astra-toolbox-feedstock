{% set version = "2.1.2" %}
{% set commit = "a78e72fa77c314ad17fd3ab0926d03fd3af31471" %}
{% set build = 3 %}

package:
  name: astra-toolbox
  version: {{ version }}

source:
  url: https://github.com/astra-toolbox/astra-toolbox/archive/{{ commit }}.tar.gz
  sha256: f66e2306f6fa9a41fd81466a845a13aa7976bb92de3d50c354965227954d1d8f
  patches:
    - cmake.patch

# The libastra ABI is the same for all CUDA versions, but different for CUDA vs
# non-CUDA, so we build only with the latest CUDA version. We don't actually
# need the CUDA compiler, but we need conda-forge to assign a build environment
# with the __cuda attribute.

build:
  number: {{ build }}
  skip: True  # [cuda_compiler_version not in ("None", "11.8")]
  string: "cudapy{{ py }}h{{ PKG_HASH }}_{{ build + 100 }}"  # [cuda_compiler_version != "None"]
  script_env:
    - ASTRA_USE_CUDA=ON   # [cuda_compiler_version != "None"]
    - ASTRA_USE_CUDA=OFF  # [cuda_compiler_version == "None"]
  ignore_run_exports_from:
    - {{ compiler('cuda') }}

requirements:
  build:
    - python                                 # [build_platform != target_platform]
    - cross-python_{{ target_platform }}     # [build_platform != target_platform]
    - cython                                 # [build_platform != target_platform]
    - numpy                                  # [build_platform != target_platform]
    - {{ compiler('cxx') }}
    - {{ compiler('cuda') }}                 # [cuda_compiler_version != "None"]
    - {{ stdlib('c') }}
    - cython >=0.13
  host:
    # libastra includes boost in its public headers
    - libboost-headers
    - cython >=0.13
    - libastra =={{ version }}
    - libastra =*=cuda*  # [cuda_compiler_version != "None"]
    - libastra =*=h*     # [cuda_compiler_version == "None"]
    - numpy
    - pip
    - python
    - setuptools
  run:
    - {{ pin_compatible('numpy') }}
    - python
    - scipy
    - six

test:
  imports:
    - astra
  requires:
    # To avoid large downloads just for testing after build phase
    - nomkl  # [not win]
    # import scipy.sparse.linalg fails with mkl-2017.0.4 on Windows
    - mkl !=2017.0.4  # [win]
    # scipy 1.1.0 packages are broken with python 2.7 and some numpy versions
    - scipy !=1.1.0  # [py==27]
  commands:
    # 27 June 2022. conda-forge doesn't have reliable native ppc64le environment
    - python -c "import astra; astra.test()"  # [not (ppc64le and CI=='azure')]

about:
  home: http://www.astra-toolbox.com
  license: GPL-3.0-only
  license_file:
    - COPYING
    - lib/licenses/rapidxml.txt
  summary: >
    The ASTRA Toolbox is a Python toolbox of high-performance GPU primitives for 2D and 3D tomography.

extra:
  recipe-maintainers:
    - carterbox
